{"version":3,"sources":["types/FilterBy.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterBy","actions","todo","type","payload","currentTodoReducer","state","action","status","query","filterReducer","newTodos","todosReducer","todos","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","preparedTodos","ACTIVE","completed","COMPTETED","ALL","trim","title","toLowerCase","includes","length","className","map","classNames","id","onClick","selectTodoAction","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","isLoading","setIsLoading","user","setUser","useEffect","userId","finally","currentTodoActions","href","email","name","App","todosActions","catch","e","Error","Root","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,sDCoBCC,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA4BrCE,EAfY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,qBACH,OAAO,KACT,IAAK,kBACH,OAAOI,EAAOH,QAEhB,QACE,OAAOE,I,OCKAL,EA5BK,SAACO,GAAD,MAAgC,CAChDL,KAAM,gBACNC,QAASI,IA0BEP,EAvBI,SAACQ,GAAD,MAA8B,CAC7CN,KAAM,eACNC,QAASK,IAqBER,EAlBM,iBAAmB,CAAEE,KAAM,uBAmB/BO,EAjBO,WAGT,IAFXJ,EAEU,uDAFK,CAAEG,MAAO,GAAID,OAAQ,OACpCD,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,gBACH,OAAO,2BAAKG,GAAZ,IAAmBE,OAAQD,EAAOH,UACpC,IAAK,eACH,OAAO,2BAAKE,GAAZ,IAAmBG,MAAOF,EAAOH,UACnC,IAAK,qBACH,OAAO,2BAAKE,GAAZ,IAAmBG,MAAO,KAC5B,QACE,OAAOH,ICpBAL,EAbD,SAACU,GAAD,MAA+B,CACzCR,KAAM,WAAYC,QAASO,IAadC,EAVM,WAAiD,IAAhDC,EAA+C,uDAA/B,GAAIN,EAA2B,uCACnE,MACO,aADCA,EAAOJ,KAEJI,EAAOH,QAEPS,GCLPC,EAAcC,0BAAgB,CAClCC,YAAaX,EACbY,OAAQP,EACRG,MAAOD,IAIIM,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,qDCfPC,EAAoCC,IACpCC,EAAkDC,K,SLJnD1B,K,gBAAAA,E,sBAAAA,E,WAAAA,M,gBMQC2B,EAAqB,WAChC,IAAMd,EAAQY,GAAe,SAACnB,GAAD,OAAWA,EAAMO,SACxCI,EAASQ,GAAe,SAACnB,GAAD,OAAWA,EAAMW,UACzCD,EAAcS,GAAe,SAACnB,GAAD,OAAWA,EAAMU,eAC9CY,EAAWL,IACTd,EAAkBQ,EAAlBR,MAAOD,EAAWS,EAAXT,OAMTqB,EAAwBC,mBAAQ,WACpC,IAAIC,EAAa,YAAOlB,GAoBxB,OAlBIL,IACFuB,EAAgBA,EAAcd,QAAO,SAACf,GACpC,OAAQM,GACN,KAAKR,EAASgC,OACZ,OAAQ9B,EAAK+B,UACf,KAAKjC,EAASkC,UACZ,OAAOhC,EAAK+B,UACd,KAAKjC,EAASmC,IACd,QACE,OAAOjC,OAKXO,EAAM2B,SACRL,EAAgBA,EAAcd,QAAO,SAACf,GAAD,OAAUA,EAAKmC,MAAMC,cAAcF,OAAOG,SAAS9B,EAAM6B,cAAcF,YAGvGL,IACN,CAAClB,EAAOI,EAAQR,IAEnB,OACE,mCACIoB,EAAcW,OAKd,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,mBAAGA,UAAU,mBAEf,uCACA,wCAIJ,gCACGZ,EAAca,KAAI,SAACxC,GAAD,OACjB,qBACE,UAAQ,OAERuC,UAAWE,IAAW,CACpB,4BAA6B3B,IAAgBd,IAJjD,UAOE,oBAAIuC,UAAU,eAAd,SAA8BvC,EAAK0C,KACnC,oBAAIH,UAAU,eAAd,SACGvC,EAAK+B,WACJ,sBAAMQ,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAWE,IAAW,CACpB,mBAAoBzC,EAAK+B,UACzB,mBAAoB/B,EAAK+B,YAH7B,SAMG/B,EAAKmC,UAIV,oBAAII,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVtC,KAAK,SACL0C,QAAS,WAhFzBjB,EAASkB,EAgFmC5C,KAJ9B,SAME,sBAAMuC,UAAU,OAAhB,SACE,mBACEA,UAAWE,IAAW,MAAO,CAC3B,SAAU3B,IAAgBd,EAC1B,eAAgBc,IAAgBd,cApCrCA,EAAK0C,YApBlB,mBAAGH,UAAU,0BAAb,oECxCKM,EAAuB,WAClC,IAAM9B,EAASQ,GAAe,SAAAnB,GAAK,OAAIA,EAAMW,UACvCW,EAAWJ,cACTf,EAAkBQ,EAAlBR,MAAOD,EAAWS,EAAXT,OAcf,OACE,uBACEiC,UAAU,mBACVO,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGT,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRU,MAAO3C,EACP4C,SAtBV,SAA4BH,GAC1BrB,EAASyB,EAAwBJ,EAAMK,OAAOH,SAkBxC,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGV,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRtC,KAAK,OACLsC,UAAU,QACVc,YAAY,YACZJ,MAAO1C,EACP2C,SAlCR,SAA2BH,GACzBrB,EAASyB,EAAuBJ,EAAMK,OAAOH,WAmCzC,sBAAMV,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdhC,GACC,sBAAMgC,UAAU,gBAAgBe,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRtD,KAAK,SACLsC,UAAU,SACVI,QA3CZ,WACEjB,EAASyB,iBCjBAK,G,MAAmB,kBAC9B,qBAAKjB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASkB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICdMC,EAAsB,WACjC,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAAsB,MAA9C,mBAAOG,EAAP,KAAaC,EAAb,KACM3D,EAAcS,GAAe,SAACnB,GAAD,OAAWA,EAAMU,eAC9CY,EAAWL,IAcjB,OAVAqD,qBAAU,WDQW,IAACC,ECPpBJ,GAAa,GAETzD,IDKgB6D,ECJV7D,EAAY6D,ODIiBlB,EAAG,iBAAiBkB,KCHtDX,KAAKS,GACLG,SAAQ,kBAAML,GAAa,QAE/B,IAGD,sBAAKhC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEd+B,EACC,cAAC,EAAD,IAEA,sBAAK/B,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,SAIGzB,GAAW,gBAAaA,EAAY4B,MAIvC,wBACEzC,KAAK,SACLsC,UAAU,SACV,UAAQ,cACRI,QAjCa,kBAAMjB,EAASmD,WAqChC,sBAAKtC,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACGzB,QADH,IACGA,OADH,EACGA,EAAaqB,QAGhB,oBAAGI,UAAU,QAAQ,UAAQ,aAA7B,UACc,OAAXzB,QAAW,IAAXA,KAAaiB,UACZ,wBAAQQ,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAID,OACD,mBAAGuC,KAAI,wBAAYN,QAAZ,IAAYA,OAAZ,EAAYA,EAAMO,OAAzB,gBAAmCP,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMQ,oBCnD1CC,EAAgB,WAC3B,MAAkCZ,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACM7C,EAAWL,IACXP,EAAcS,GAAe,SAAAnB,GAAK,OAAIA,EAAMU,eAalD,OAXA4D,qBAAU,WACRH,GAAa,GFEad,EAAY,UECnCO,MAAK,SAAAvD,GAAQ,OAAIiB,EAASwD,EAAiBzE,OAC3C0E,OAAM,SAACC,GACN,MAAM,IAAIC,MAAMD,MAEjBR,SAAQ,kBAAML,GAAa,QAC7B,IAGD,qCACE,qBAAKhC,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACG+B,EACC,cAAC,EAAD,IAEA,cAAC,EAAD,aAOTxD,GACC,cAAC,EAAD,QC3CFwE,EAAO,kBACX,cAAC,IAAD,CAAUtE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNuE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.aca53bf5.chunk.js","sourcesContent":["export enum FilterBy {\n  ACTIVE = 'active',\n  COMPTETED = 'completed',\n  ALL = 'all',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatus = { type: 'filter/STATUS', payload: Status };\ntype SetQuery = { type: 'filter/QUERY', payload: string };\ntype ResetQuery = { type: 'filter/RESET_QUERY' };\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\ntype Actions = SetStatus | SetQuery | ResetQuery;\n\nconst setStatus = (status: Status): SetStatus => ({\n  type: 'filter/STATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQuery => ({\n  type: 'filter/QUERY',\n  payload: query,\n});\n\nconst resetQuery = (): ResetQuery => ({ type: 'filter/RESET_QUERY' });\n\nconst filterReducer = (\n  state: State = { query: '', status: 'all' },\n  action: Actions,\n): State => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return { ...state, status: action.payload };\n    case 'filter/QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/RESET_QUERY':\n      return { ...state, query: '' };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setStatus, setQuery, resetQuery };\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype Action = { type: 'todo/SET', payload: Todo[] };\n\nconst set = (newTodos: Todo[]): Action => ({\n  type: 'todo/SET', payload: newTodos,\n});\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todo/SET':\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { set };\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as selectTodoAction } from '../../features/currentTodo';\nimport { FilterBy } from '../../types/FilterBy';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector((state) => state.todos);\n  const filter = useAppSelector((state) => state.filter);\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const { query, status } = filter;\n\n  const onSelectTodo = (newTodo: Todo) => {\n    dispatch(selectTodoAction.setTodo(newTodo));\n  };\n\n  const filteredTodos: Todo[] = useMemo(() => {\n    let preparedTodos = [...todos];\n\n    if (status) {\n      preparedTodos = preparedTodos.filter((todo: Todo) => {\n        switch (status) {\n          case FilterBy.ACTIVE:\n            return !todo.completed;\n          case FilterBy.COMPTETED:\n            return todo.completed;\n          case FilterBy.ALL:\n          default:\n            return todo;\n        }\n      });\n    }\n\n    if (query.trim()) {\n      preparedTodos = preparedTodos.filter((todo) => todo.title.toLowerCase().trim().includes(query.toLowerCase().trim()));\n    }\n\n    return preparedTodos;\n  }, [todos, filter, query]);\n\n  return (\n    <>\n      {!filteredTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <i className=\"fas fa-check\" />\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map((todo) => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n                className={classNames({\n                  'has-background-info-light': currentTodo === todo,\n                })}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames({\n                      'has-text-danger': !todo.completed,\n                      'has-text-success': todo.completed,\n                    })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => onSelectTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames('far', {\n                          'fa-eye': currentTodo !== todo,\n                          'fa-eye-slash': currentTodo === todo,\n                        })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n  const { query, status } = filter;\n\n  function handleStatusChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  }\n\n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    dispatch(filterActions.setQuery(event.target.value));\n  }\n\n  function handleCloseSearch() {\n    dispatch(filterActions.resetQuery());\n  }\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleCloseSearch}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const handleCloseModal = () => dispatch(currentTodoActions.removeTodo());\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {currentTodo && `Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {/* For completed */}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(newTodos => dispatch(todosActions.set(newTodos)))\n      .catch((e) => {\n        throw new Error(e);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}